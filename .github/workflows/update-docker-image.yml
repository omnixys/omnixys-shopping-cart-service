name: Update Docker Image Tag - Omnixys Shopping Cart Service

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write # ← WICHTIG für Cosign ohne Schlüssel (keyless signing)

env:
  COSIGN_EXPERIMENTAL: "true"
  IMAGE_NAME: ${{ secrets.DOCKER_USER }}/${{ secrets.SERVICE }}

  ACTIVE_PROFILE: ${{ secrets.ACTIVE_PROFILE }}
  HTTPS: ${{ secrets.HTTPS }}

  NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  KC_SERVICE_SECRET: ${{ secrets.KC_SERVICE_SECRET }}

  KAFKA_HOST: ${{ secrets.KAFKA_HOST }}
  TEMPO_HOST: ${{ secrets.TEMPO_HOST }}
  KEYS_PATH: ${{ secrets.KEYS_PATH }}

jobs:
    docker:
      name: 🐳 Docker Build & Push
      runs-on: ubuntu-latest
      strategy:
        matrix:
          node-version: [23.10.0]
      env:
        CURRENT_DATE: ${{ vars.CURRENT_DATE }}
      if: github.actor == 'caleb-script' && github.event_name == 'push'
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Print ref name
          run: echo "This workflow was triggered by ${{ github.ref_name }}"

        - name: Print actor
          run: echo "The actor is ${{ github.actor }}"

        - name: Print tag
          run: echo "The tag is ${{ github.ref_name }}"

        - name: Set CURRENT_DATE
          id: set_date
          run: |
            DATE=$(date +'%Y-%m-%d')
            echo "CURRENT_DATE=$DATE" >> $GITHUB_OUTPUT

        - name: Aktualisiere CURRENT_DATE in Organisations-Variable (sicher)
          run: |
            CURRENT_DATE="${{ steps.set_date.outputs.CURRENT_DATE }}"

            if [ -z "$CURRENT_DATE" ]; then
              echo "Fehler: CURRENT_DATE ist leer!"
              exit 1
            fi

            ORG_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f1)

            EXISTING=$(curl -s \
              -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/orgs/${ORG_NAME}/actions/variables/CURRENT_DATE \
              | jq -r '.value')

            echo "Updating org-level CURRENT_DATE from $EXISTING to $CURRENT_DATE"

            if [ "$EXISTING" != "$CURRENT_DATE" ]; then
              curl -X PATCH \
                -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
                -H "Accept: application/vnd.github+json" \
                https://api.github.com/orgs/${ORG_NAME}/actions/variables/CURRENT_DATE \
                -d "{\"value\": \"${CURRENT_DATE}\"}"
            else
              echo "CURRENT_DATE ist bereits aktuell: $CURRENT_DATE"
            fi

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
          with:
            install: true
            driver-opts: image=moby/buildkit:latest

        - name: Log in to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKER_USER }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: Set up Docker Cache
          uses: actions/cache@v4
          with:
            path: /tmp/.buildx-cache
            key: buildx-${{ github.sha }}
            restore-keys: |
              buildx-

        - name: Build and Push Docker Image (Multi-Arch)
          uses: docker/build-push-action@v5
          with:
            context: .
            push: true
            platforms: linux/amd64,linux/arm64
            tags: |
              ${{ env.IMAGE_NAME }}:${{ env.CURRENT_DATE }}
              ${{ env.IMAGE_NAME }}:latest
            build-args: |
              REVISION=${{ github.sha }}
              CREATED=${{ env.CURRENT_DATE }}
              APP_VERSION=${{ env.CURRENT_DATE }}
              APP_NAME=${{ secrets.SERVICE }}-service
              NODE_VERSION=${{ matrix.node-version }}
            cache-from: type=local,src=/tmp/.buildx-cache
            cache-to: type=local,dest=/tmp/.buildx-cache

        - name: Install cosign
          uses: sigstore/cosign-installer@v3

        - name: Sign Docker Image with cosign (OIDC/GitHub)
          run: |
            cosign sign --yes --recursive ${{ env.IMAGE_NAME }}:${{ env.CURRENT_DATE }}
            cosign sign --yes --recursive ${{ env.IMAGE_NAME }}:latest
